{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome GB.HLA is a free Game Boy and Game Boy Color assembler. Introduction GB.HLA aims to provide a complete toolchain for Gameboy development. This targets the Game Boy (DMG) and Game Boy Color (GBC). The Game Boy Advance is a completely different device and not covered by this toolchain. Why? The primary toolchain generally recommended for Game Boy assembly is RGBDS . So why another toolchain? GB.HLA offers a different approach compared to RGBDS. Key differences are: Single pass. RGBDS depends on different tools doing different parts, and combining it all in a linking step. GB.HLA does everything in a single pass. Which does away with complex build systems and intermediate files. Extremely powerful macro matching mechanism. This mechanism is powerful enough that ALL assembly instructions are implemented as macros. But the macro system is even more powerful with scoping and linking. Slower, as RGBDS is written in C++ and is multiple times faster then GB.HLA. This makes GB.HLA usually 5x slower then RGBDS. In practice this means your build times goes from 1 to 5 seconds. Easier to extend. Missing a feature? It is likely that you can easily add it in your own version of GB.HLA with ease. Glossary DMG: The classic Game Boy with the 4 shades of green screen, released in 1989. GBC/CGB: The Game Boy Color is an enhanced version of the DMG, with the addition of color and more features. Released in 1998. GBA: Game Boy Advanced, not covered by this toolchain. See gbadev for details on the GBA. Pandocs: The pandocs are the number 1 reference for details on how the DMG and GBC hardware functions.","title":"Welcome"},{"location":"#welcome","text":"GB.HLA is a free Game Boy and Game Boy Color assembler.","title":"Welcome"},{"location":"#introduction","text":"GB.HLA aims to provide a complete toolchain for Gameboy development. This targets the Game Boy (DMG) and Game Boy Color (GBC). The Game Boy Advance is a completely different device and not covered by this toolchain.","title":"Introduction"},{"location":"#why","text":"The primary toolchain generally recommended for Game Boy assembly is RGBDS . So why another toolchain? GB.HLA offers a different approach compared to RGBDS. Key differences are: Single pass. RGBDS depends on different tools doing different parts, and combining it all in a linking step. GB.HLA does everything in a single pass. Which does away with complex build systems and intermediate files. Extremely powerful macro matching mechanism. This mechanism is powerful enough that ALL assembly instructions are implemented as macros. But the macro system is even more powerful with scoping and linking. Slower, as RGBDS is written in C++ and is multiple times faster then GB.HLA. This makes GB.HLA usually 5x slower then RGBDS. In practice this means your build times goes from 1 to 5 seconds. Easier to extend. Missing a feature? It is likely that you can easily add it in your own version of GB.HLA with ease.","title":"Why?"},{"location":"#glossary","text":"DMG: The classic Game Boy with the 4 shades of green screen, released in 1989. GBC/CGB: The Game Boy Color is an enhanced version of the DMG, with the addition of color and more features. Released in 1998. GBA: Game Boy Advanced, not covered by this toolchain. See gbadev for details on the GBA. Pandocs: The pandocs are the number 1 reference for details on how the DMG and GBC hardware functions.","title":"Glossary"},{"location":"getting-started/","text":"Getting Started Installation To install GB.HLA you will need the following parts: Python3: Install from Python website GB.HLA: Download and extract from Github zip An Emulator with debugging support: BGB or Emulicious are recommended. A plain text editor: Visual Studio Code GB.HLA contains a gb-hla-language directory. Copying this to C:\\Users\\[username]\\.vscode\\extensions will enable basic syntax highlighting for .asm files (TODO: This install guide needs work) Your first ROM NOTE: This is not a tutorial on how to create a Game Boy game. It only explains how to get a basic setup working with GB.HLA. Create a project directory and in there create a new file named main.asm . In this file put the following contents: ; Comments start with a semicolon. #INCLUDE \"gbz80/all.asm\" ; include all Game Boy instructions and registers. ; Setup the ROM header. This line can be anywhere but needs to be present for a valid ROM. ; This defines the name, the MBC to use and where the code starts. ; Use GBC_HEADER for a rom with GBC support. GB_HEADER \"FirstRom\", GB_MCB_ROM_ONLY, entry ; The entry code, this code is ran at the start of the rom. #SECTION \"Entry\", ROM0 { entry: ld sp, $E000 ; Change the stack pointer, the boot ROM leaves it in HRAM, but HRAM is too valuable for that. loop: halt ; Do nothing. jr loop } To build the rom run the command python3 [path-to-GB.HLA]/main.py main.asm --output rom.gb --symbols rom.sym this will create your rom and the respective .sym file for debugging. It will also output how much space is free in the rom. You can now load this rom in any Emulator and run it. Nothing will happen, but there will also be no error. And if you enter the debugger, you will see the entry label.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installation","text":"To install GB.HLA you will need the following parts: Python3: Install from Python website GB.HLA: Download and extract from Github zip An Emulator with debugging support: BGB or Emulicious are recommended. A plain text editor: Visual Studio Code GB.HLA contains a gb-hla-language directory. Copying this to C:\\Users\\[username]\\.vscode\\extensions will enable basic syntax highlighting for .asm files (TODO: This install guide needs work)","title":"Installation"},{"location":"getting-started/#your-first-rom","text":"NOTE: This is not a tutorial on how to create a Game Boy game. It only explains how to get a basic setup working with GB.HLA. Create a project directory and in there create a new file named main.asm . In this file put the following contents: ; Comments start with a semicolon. #INCLUDE \"gbz80/all.asm\" ; include all Game Boy instructions and registers. ; Setup the ROM header. This line can be anywhere but needs to be present for a valid ROM. ; This defines the name, the MBC to use and where the code starts. ; Use GBC_HEADER for a rom with GBC support. GB_HEADER \"FirstRom\", GB_MCB_ROM_ONLY, entry ; The entry code, this code is ran at the start of the rom. #SECTION \"Entry\", ROM0 { entry: ld sp, $E000 ; Change the stack pointer, the boot ROM leaves it in HRAM, but HRAM is too valuable for that. loop: halt ; Do nothing. jr loop } To build the rom run the command python3 [path-to-GB.HLA]/main.py main.asm --output rom.gb --symbols rom.sym this will create your rom and the respective .sym file for debugging. It will also output how much space is free in the rom. You can now load this rom in any Emulator and run it. Nothing will happen, but there will also be no error. And if you enter the debugger, you will see the entry label.","title":"Your first ROM"}]}